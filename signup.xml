
Box(
        
        
        modifier = Modifier
        
        .width(360.dp)
        .height(800.dp)
        .clip(RoundedCornerShape(topStart = 0.dp, topEnd = 0.dp, bottomStart = 0.dp, bottomEnd = 0.dp))
        .background(Color(red = 0.9607843160629272f, green = 0.9686274528503418f, blue = 0.9803921580314636f, alpha = 1f))
        
        .padding(start = 0.dp, top = 0.dp, end = 0.dp, bottom = 0.dp)
        
        .alpha(1f)
        
        
        ) {

Canvas(
      modifier = Modifier
      .width(583.dp)
      .height(145.dp)
      //.fillMaxWidth()
      //.aspectRatio(1f)
      .align(Alignment.TopStart)
    ) {
      val fillPath = PathParser.createPathFromPathData("M 0 0 L 5.344166666666666 12.083333333333332 C 10.688333333333333 24.166666666666664 21.376666666666672 48.33333333333333 32.55083333333334 66.45833333333333 C 43.23916666666667 84.58333333333333 53.927499999999995 96.66666666666667 64.61583333333333 99.6875 C 75.78999999999999 102.70833333333333 86.47833333333334 96.66666666666667 97.16666666666667 87.60416666666667 C 107.855 78.54166666666667 118.54333333333334 66.45833333333334 129.7175 69.47916666666667 C 140.40583333333333 72.5 151.09416666666667 90.62499999999999 161.7825 105.72916666666666 C 172.95666666666668 120.83333333333333 183.645 132.91666666666666 194.33333333333334 123.85416666666666 C 205.02166666666668 114.79166666666666 215.70999999999998 84.58333333333333 226.88416666666666 75.52083333333333 C 237.5725 66.45833333333333 248.26083333333332 78.54166666666667 258.94916666666666 69.47916666666667 C 270.12333333333333 60.41666666666667 280.81166666666667 30.20833333333333 291.5 24.166666666666664 C 302.18833333333333 18.125 312.87666666666667 36.25 324.05083333333334 48.33333333333333 C 334.7391666666667 60.41666666666666 345.4275 66.45833333333333 356.11583333333334 81.5625 C 367.29 96.66666666666667 377.97833333333335 120.83333333333333 388.6666666666667 132.91666666666666 C 399.355 145 410.04333333333335 145 421.21750000000003 123.85416666666666 C 431.90583333333336 102.70833333333333 442.5941666666667 60.416666666666664 453.2825 51.354166666666664 C 464.4566666666667 42.291666666666664 475.145 66.45833333333333 485.8333333333333 72.5 C 496.52166666666665 78.54166666666667 507.21000000000004 66.45833333333333 518.3841666666667 51.354166666666664 C 529.0725 36.25 539.7608333333333 18.125 550.4491666666667 33.229166666666664 C 561.6233333333333 48.33333333333333 572.3116666666667 96.66666666666666 577.6558333333334 120.83333333333333 L 583 145 L 583 0 L 577.6558333333334 0 C 572.3116666666667 0 561.6233333333333 0 550.4491666666667 0 C 539.7608333333333 0 529.0725 0 518.3841666666667 0 C 507.21000000000004 0 496.52166666666665 0 485.8333333333333 0 C 475.145 0 464.4566666666667 0 453.2825 0 C 442.5941666666667 0 431.90583333333336 0 421.21750000000003 0 C 410.04333333333335 0 399.355 0 388.6666666666667 0 C 377.97833333333335 0 367.29 0 356.11583333333334 0 C 345.4275 0 334.7391666666667 0 324.05083333333334 0 C 312.87666666666667 0 302.18833333333333 0 291.5 0 C 280.81166666666667 0 270.12333333333333 0 258.94916666666666 0 C 248.26083333333332 0 237.5725 0 226.88416666666666 0 C 215.70999999999998 0 205.02166666666668 0 194.33333333333334 0 C 183.645 0 172.95666666666668 0 161.7825 0 C 151.09416666666667 0 140.40583333333333 0 129.7175 0 C 118.54333333333334 0 107.855 0 97.16666666666667 0 C 86.47833333333334 0 75.78999999999999 0 64.61583333333333 0 C 53.927499999999995 0 43.23916666666667 0 32.55083333333334 0 C 21.376666666666672 0 10.688333333333333 0 5.344166666666666 0 L 0 0 Z ")
      //fillPath.fillType = Path.FillType.EVEN_ODD
      val rectF = RectF()
      fillPath.computeBounds(rectF, true)
      val matrix = Matrix()
      val scale = minOf( size.width / rectF.width(), size.height / rectF.height() )
      matrix.setScale(scale, scale)
      fillPath.transform(matrix)
      val composePathFill = fillPath.asComposePath()

      drawPath(path = composePathFill, color = Color(red = 0.32549020648002625f, green = 0.7960784435272217f, blue = 0.5960784554481506f, alpha = 1f), style = Fill)
      drawPath(path = composePathFill, color = Color(red = 0f, green = 0f, blue = 0f, alpha = 1f), style = Stroke(width = 2f, miter = 4f, join = StrokeJoin.Round))
    }

      Text(
        text = "Already have an account?",
        textAlign = TextAlign.Center, 
        fontSize = 18.sp,
        textDecoration = TextDecoration.None,
        letterSpacing = 0.sp,
        lineHeight = 20.sp,
        overflow = TextOverflow.Ellipsis,
        modifier = Modifier
        .align(Alignment.Center)
        .width(215.dp)
        
        //.height(20.dp)
        
        .alpha(1f),
        color = Color(red = 0.43372008204460144f, green = 0.42265844345092773f, blue = 0.5627720952033997f, alpha = 1f),
        fontWeight = FontWeight.Normal,
        fontStyle = FontStyle.Normal,
      )
      

      Text(
        text = "Log in",
        textAlign = TextAlign.Center, 
        fontSize = 18.sp,
        textDecoration = TextDecoration.None,
        letterSpacing = 0.sp,
        lineHeight = 20.sp,
        overflow = TextOverflow.Ellipsis,
        modifier = Modifier
        .align(Alignment.TopStart)
        .width(61.227272033691406.dp)
        
        //.height(22.595857620239258.dp)
        
        .alpha(1f),
        color = Color(red = 0.32549020648002625f, green = 0.7960784435272217f, blue = 0.5960784554481506f, alpha = 1f),
        fontWeight = FontWeight.Bold,
        fontStyle = FontStyle.Normal,
      )
      
Box(
        
        
        modifier = Modifier
        
        .width(360.dp)
        .height(763.dp)
        .clip(RoundedCornerShape(topStart = 0.dp, topEnd = 0.dp, bottomStart = 0.dp, bottomEnd = 0.dp))
        .background(Color.Transparent)
        
        .padding(start = 114.dp, top = 85.dp, end = 89.dp, bottom = 558.dp)
        .align(Alignment.TopStart)
        .alpha(1f)
        
        
        ) {

Canvas(
      modifier = Modifier
      .width(51.9765625.dp)
      .height(104.71939086914062.dp)
      //.fillMaxWidth()
      //.aspectRatio(1f)
      .align(Alignment.Center)
    ) {
      val fillPath = PathParser.createPathFromPathData("M 51.9765625 24.885236039728486 L 51.40381758919449 24.885236039728486 L 51.40381758919449 9.122851026513205 C 51.403818852190945 7.924822415207762 51.16893088833126 6.7385248271935545 50.71256725398248 5.631690239078786 C 50.256203619633695 4.524855650964017 49.58730072600657 3.5191597437425575 48.74404939394459 2.672024767951379 C 47.90079806188262 1.8248897921602005 46.89971141149374 1.1529052579505865 45.79794983393841 0.6944385424396146 C 44.69618825638308 0.23597182692864255 43.515329110505725 0.000001015064347057169 42.3227905904119 1.6597179766972394e-11 L 9.081050479152001 1.6597179766972394e-11 C 6.6726108382833065 -0.000004612448755488364 4.362813329943532 0.9611433763157391 2.659785805526948 2.6720041280436138 C 0.9567582811103639 4.382864879771488 0.0000051014705858777435 6.703294163202136 5.095196955151278e-12 9.122821540930683 L 5.095196955151278e-12 95.59653984262742 C -0.00000126299145133402 96.79456836179043 0.23488679258341816 97.98086908264777 0.6912503352120076 99.0877035786201 C 1.147613877840597 100.19453807459242 1.8165171383484986 101.20022522828157 2.6597681952498915 102.04736020407275 C 3.5030192521512844 102.89449517986392 4.504106452861322 103.5664796219311 5.605867755256074 104.02494642958452 C 6.707629057650825 104.48341323723794 7.888488570408958 104.71938960033094 9.081026998782592 104.71939086914062 L 42.32274362967308 104.71939086914062 C 44.73118382086293 104.71939753159367 47.04098499801042 103.7582434385573 48.74401417339048 102.04738379253877 C 50.44704334877054 100.33652414652023 51.40379870696104 98.01610315590966 51.403805849009785 95.59657522532645 L 51.403805849009785 36.10517246059827 L 51.9765625 36.10517246059827 L 51.9765625 24.885236039728486 Z ")
      //fillPath.fillType = Path.FillType.EVEN_ODD
      val rectF = RectF()
      fillPath.computeBounds(rectF, true)
      val matrix = Matrix()
      val scale = minOf( size.width / rectF.width(), size.height / rectF.height() )
      matrix.setScale(scale, scale)
      fillPath.transform(matrix)
      val composePathFill = fillPath.asComposePath()

      drawPath(path = composePathFill, color = Color(red = 0.24705882370471954f, green = 0.239215686917305f, blue = 0.33725491166114807f, alpha = 1f), style = Fill)
      drawPath(path = composePathFill, color = Color.Transparent, style = Stroke(width = 3f, miter = 4f, join = StrokeJoin.Round))
    }
Canvas(
      modifier = Modifier
      .width(46.965049743652344.dp)
      .height(99.97248077392578.dp)
      //.fillMaxWidth()
      //.aspectRatio(1f)
      .align(Alignment.Center)
    ) {
      val fillPath = PathParser.createPathFromPathData("M 40.18343235937503 6.8486698194314036e-12 L 35.84428390485069 6.8486698194314036e-12 C 36.04382873638398 0.49147478700723013 36.12000456932941 1.0247076028203637 36.06609119750738 1.5527223466372826 C 36.012177825685356 2.0807370904542015 35.829833022667465 2.58733116057401 35.53512377458154 3.0278740339264907 C 35.24041452649562 3.4684169072789715 34.84238597426074 3.829387580336916 34.376097608649886 4.078990671363714 C 33.90980924303903 4.328593762390512 33.38957358633487 4.459166745647334 32.86122060145053 4.459207203328678 L 13.81746257879303 4.459207203328678 C 13.289109089447674 4.459168159930187 12.768874716826112 4.328596342378612 12.302585571593676 4.078993619921542 C 11.83629642636124 3.8293908974644726 11.438263058816597 3.4684202704777443 11.14355353557012 3.027876982484319 C 10.848844012323644 2.5873336944908933 10.666498836692496 2.0807406379378386 10.612586112644278 1.552725295195111 C 10.55867338859606 1.0247099524523833 10.63484708331466 0.491474740936014 10.834393405300972 6.8486698194314036e-12 L 6.781623254369212 6.8486698194314036e-12 C 5.891048865119068 -7.612795572963997e-7 5.009192387826943 0.17621894611841887 4.186408663201444 0.5185952994069774 C 3.3636249385759456 0.8609716526955358 2.616023975244649 1.3628008533647402 1.9862923477665941 1.9954306132161697 C 1.3565607202885395 2.628060373067599 0.8570303223201108 3.3791015431747926 0.5162217520648454 4.205672509900687 C 0.17541318180958004 5.032243476626581 5.052004934064414e-7 5.918157302490592 2.438259300641033e-12 6.812831570089909 L 2.438259300641033e-12 93.15964920383587 C -7.577953442308957e-7 94.05432365572005 0.1754142365917189 94.94022771448626 0.5162217520648454 95.76679941835161 C 0.857029267537972 96.59337112221696 1.3565555839581243 97.344419295149 1.986286477674691 97.97705016070961 C 2.6160173713912576 98.60968102627022 3.3636193436446007 99.11151077979403 4.186402793109541 99.45388842307663 C 5.009186242574481 99.79626606635924 5.891036941494889 99.97248026640197 6.781611514185405 99.97248077392578 L 40.18343235937503 99.97248077392578 C 41.07400693206555 99.97248128144993 41.95585726410522 99.79626512189931 42.7786410804509 99.45388842307663 C 43.60142489679659 99.11151172425396 44.3490257684077 98.60968028913076 44.97875739588575 97.97705016070961 C 45.6084890233638 97.34442003228845 46.10801955891252 96.59338254787855 46.4488279915875 95.76681121258292 C 46.78963642426248 94.9402398772873 46.96504949105327 94.05432365572005 46.965049743652344 93.15964920383587 L 46.965049743652344 6.812831570089909 C 46.96504974365323 5.918157210348159 46.78963640133244 5.032243753053877 46.4488279915875 4.205672509900687 C 46.10801958184256 3.3791012667474964 45.60848911508399 2.628060465210031 44.97875739588575 1.9954306132161697 C 44.34902567668751 1.362800761222308 43.601424988516776 0.8609714914462796 42.7786410804509 0.5185952994069774 C 41.95585717238503 0.17621910736767515 41.07400684034536 -0.000001268804501640223 40.18343235937503 6.8486698194314036e-12 Z ")
      //fillPath.fillType = Path.FillType.EVEN_ODD
      val rectF = RectF()
      fillPath.computeBounds(rectF, true)
      val matrix = Matrix()
      val scale = minOf( size.width / rectF.width(), size.height / rectF.height() )
      matrix.setScale(scale, scale)
      fillPath.transform(matrix)
      val composePathFill = fillPath.asComposePath()

      drawPath(path = composePathFill, color = Color(red = 1f, green = 1f, blue = 1f, alpha = 1f), style = Fill)
      drawPath(path = composePathFill, color = Color.Transparent, style = Stroke(width = 3f, miter = 4f, join = StrokeJoin.Round))
    }
Canvas(
      modifier = Modifier
      .width(73.6705093383789.dp)
      .height(0.38648223876953125.dp)
      //.fillMaxWidth()
      //.aspectRatio(1f)
      .align(Alignment.Center)
    ) {
      val fillPath = PathParser.createPathFromPathData("M 73.47815813906199 0.38648223876953125 L 0.19235119931691622 0.38648223876953125 C 0.14133648754656325 0.38648223876953125 0.09241106159636786 0.3661201628625008 0.05633821519299632 0.32988042407669127 C 0.02026536878962478 0.2936406852908817 0 0.24449185264040807 0 0.19324111938476562 C 0 0.14199038612912318 0.02026536878962478 0.09284155347864953 0.05633821519299632 0.05660181469283998 C 0.09241106159636786 0.02036207590703043 0.14133648754656325 0 0.19235119931691622 0 L 73.47815813906199 0 C 73.52917285083234 0 73.57809534173617 0.02036207590703043 73.61416818813954 0.05660181469283998 C 73.65024103454292 0.09284155347864953 73.6705093383789 0.14199038612912318 73.6705093383789 0.19324111938476562 C 73.6705093383789 0.24449185264040807 73.65024103454292 0.2936406852908817 73.61416818813954 0.32988042407669127 C 73.57809534173617 0.3661201628625008 73.52917285083234 0.38648223876953125 73.47815813906199 0.38648223876953125 Z ")
      //fillPath.fillType = Path.FillType.EVEN_ODD
      val rectF = RectF()
      fillPath.computeBounds(rectF, true)
      val matrix = Matrix()
      val scale = minOf( size.width / rectF.width(), size.height / rectF.height() )
      matrix.setScale(scale, scale)
      fillPath.transform(matrix)
      val composePathFill = fillPath.asComposePath()

      drawPath(path = composePathFill, color = Color(red = 0.7960784435272217f, green = 0.7960784435272217f, blue = 0.7960784435272217f, alpha = 1f), style = Fill)
      drawPath(path = composePathFill, color = Color.Transparent, style = Stroke(width = 3f, miter = 4f, join = StrokeJoin.Round))
    }
Canvas(
      modifier = Modifier
      .width(23.695297241210938.dp)
      .height(33.70793151855469.dp)
      //.fillMaxWidth()
      //.aspectRatio(1f)
      .align(Alignment.Center)
    ) {
      val fillPath = PathParser.createPathFromPathData("M 0.8319043726629534 20.27943724919861 C 1.0295212418785482 19.95846964529891 1.2621572982618487 19.66064780014054 1.525502838660999 19.391496964230008 C 1.6340870191322034 19.278349183086544 1.7486391582090322 19.171734494611925 1.866731261543837 19.068016659846272 C 2.5849317006595722 18.42582294651572 3.460439262794652 17.987399857735678 4.403222173937171 17.797813635774553 C 5.34600508507969 17.608227413813427 6.322040422933141 17.674324516158553 7.230963444444276 17.989316523523073 C 8.13988646595541 18.304308530887592 8.948894907181463 18.856818608395834 9.574797716330764 19.5900410063781 C 10.200700525480064 20.323263404360368 10.620902407019006 21.21073790944662 10.792208074158983 22.161194608155864 C 11.58552217931657 19.213905000398107 9.520423593836446 16.310837115168066 7.4441769677095735 14.08089791456476 C 5.366831900402673 11.85171999455255 2.992550985946485 9.4062821797987 3.0044844553747514 6.351750048220456 C 3.010295385405888 4.65210442258851 3.8379217478307766 3.1357814658335768 5.087487191832364 2.011615684448184 C 5.126036297029295 1.9775519283588245 5.164578795505182 1.9435371027686046 5.203914619299021 1.9107042656161117 C 6.714235012357964 0.6101534016844841 8.65735407117715 -0.07012743007324171 10.64515050065416 0.005724046316264121 C 14.338101309653263 0.20444281350924726 17.56262125373154 2.697871713937224 19.801943286596195 5.65551315288445 C 23.406403175174233 10.414394411553504 24.98588087827539 17.094463714959204 22.46249256410616 22.51175446111819 C 20.24295201138339 27.276284049517848 15.50922231421352 30.105571848528804 10.678046502646856 32.380125482611085 C 10.003446455536983 32.6978065279967 9.330183322141213 33.00591839982305 8.65825311263061 33.30445096242505 C 8.65385596393651 33.305610382271134 8.648981367146257 33.30880004737223 8.644505354481629 33.3099942498083 C 8.612157650144379 33.32425124909893 8.5798106251099 33.338554035968684 8.549503766999507 33.35325547985459 C 8.410845471305402 33.41470472899756 8.272119990560832 33.47620758198753 8.134640803967416 33.53689161721029 L 8.198307834233795 33.5787257456111 L 8.396940046123314 33.70793151855469 C 8.32807831017556 33.66602815377114 8.25993376890901 33.625380252358916 8.19107587947737 33.583478819686526 C 8.1705847042142 33.57078896986616 8.148914920012086 33.558864657904174 8.128500686536231 33.54612649810621 C 5.755704292267222 32.115852665883885 3.3498545041330248 30.602715164383707 1.7106220044071891 28.3697575627149 C 0.010554610917724805 26.051319815894992 -0.6729899447639467 22.730435305539142 0.8319043726629534 20.27943724919861 Z ")
      //fillPath.fillType = Path.FillType.EVEN_ODD
      val rectF = RectF()
      fillPath.computeBounds(rectF, true)
      val matrix = Matrix()
      val scale = minOf( size.width / rectF.width(), size.height / rectF.height() )
      matrix.setScale(scale, scale)
      fillPath.transform(matrix)
      val composePathFill = fillPath.asComposePath()

      drawPath(path = composePathFill, color = Color(red = 0.32549020648002625f, green = 0.7960784435272217f, blue = 0.5960784554481506f, alpha = 1f), style = Fill)
      drawPath(path = composePathFill, color = Color.Transparent, style = Stroke(width = 3f, miter = 4f, join = StrokeJoin.Round))
    }
Canvas(
      modifier = Modifier
      .width(16.240219116210938.dp)
      .height(31.802711486816406.dp)
      //.fillMaxWidth()
      //.aspectRatio(1f)
      .align(Alignment.Center)
    ) {
      val fillPath = PathParser.createPathFromPathData("M 15.137406360568654 12.989945573555195 C 15.662866197067771 14.190720305760372 16.01120543689734 15.462057798513172 16.171434843237627 16.763827998967983 C 16.297492505244616 17.92460628484255 16.250097885216196 19.097797537384924 16.030810914296612 20.244494065148114 C 15.559629160561721 22.600918251615468 14.532039251843297 24.80921446132275 13.03448104751366 26.68362633147965 C 11.904657612896226 28.10664628714608 10.600326426148282 29.380503414486945 9.15250688890207 30.47491704080006 C 8.477933869486508 30.792598135065706 7.804670889555487 31.10069955006338 7.13271382170042 31.399230868605187 C 7.1282993622396535 31.400390288629666 7.123440154081896 31.403579954221538 7.118966065748681 31.404774156841352 C 7.086651067695681 31.41903502254855 7.054274794822746 31.433333947396093 7.023941013081409 31.448035393544036 C 6.885282739548442 31.509484652141907 6.746567289941563 31.57098944958593 6.609101596723852 31.63167155915493 L 6.672768616814612 31.673505693992556 L 6.871412537142046 31.802711486816406 C 6.802541198777663 31.760811979808306 6.734408001578422 31.72016214003033 6.66553666321404 31.678258768799314 C 6.645074344391515 31.665565051363785 6.623407283729692 31.653646535341156 6.6030084410116805 31.640906441471778 C 7.125166350643652 29.80593687310672 7.20192672605517 27.87196635140493 6.826846797096955 26.00105884192286 C 6.451766868138741 24.13015133244079 5.635769867488262 22.376811843329044 4.447252298082369 20.887963681294497 C 3.252343757504927 19.417883180350888 1.728514689258759 18.252313810919603 0 17.486295369594888 C 0.1085630101476852 17.373143701060112 0.2230815269312676 17.266534801153938 0.341169759143925 17.16281501543882 C 1.0069751079450242 17.469953012285306 1.6444424948905692 17.835621719792996 2.2461320825676436 18.255562246011394 C 4.3980814706999 19.749737898724774 6.013962848510811 21.900273524151807 6.854600593057596 24.388845058191205 C 7.605097339234666 26.646521682988205 7.69884417932359 29.0724448457165 7.124824417772522 31.381775407776406 C 7.243914807719405 31.303535812679495 7.363451576904641 31.223255141950986 7.479706712314936 31.143390425160643 C 9.69020641797655 29.645844847569247 11.727433292155963 27.84734202569333 13.261970600952472 25.64179479306779 C 14.585476168738118 23.777816946735474 15.432416030521658 21.615484879600547 15.728207660960937 19.34525477093893 C 16.022312625882392 16.865303713532224 15.40464139114767 14.426609795103193 14.302538366341443 12.213802660879786 C 13.085498202336009 9.846468074255052 11.551956974811088 7.657423918362397 9.74452916847367 5.707504095896791 C 7.9291338126058335 3.7037578020919435 5.876487490277999 1.9307180784145541 3.6323543575476487 0.42789937417456503 C 3.5817992087911534 0.3936232389535967 3.5462943559122144 0.34112524253217436 3.533185019781347 0.2812852744074866 C 3.520075683650479 0.2214453062827988 3.5303651312429656 0.15884357631501633 3.561924991232975 0.10641223341965511 C 3.5859950177073388 0.05868001882116758 3.62784383945945 0.02241309505650655 3.678375880460387 0.005500795101591393 C 3.704040949714523 -0.0010851926431050584 3.7308484312058274 -0.00176680794724806 3.7568120525471236 0.0035075701826292136 C 3.7827756738884197 0.008781948312506487 3.8072201064808255 0.01987893183972932 3.8283215158281165 0.03596529301972452 C 4.10536684628999 0.2217140425422492 4.3800425397636396 0.4090184124553474 4.651378884532315 0.6020058017113679 C 6.911331182002394 2.209580951527048 8.963732061099769 4.092975694470778 10.761440462263364 6.208923633864124 C 12.498577399774145 8.248538577683028 14.079474862427658 10.514564596100907 15.137406360568654 12.989945573555195 Z ")
      //fillPath.fillType = Path.FillType.EVEN_ODD
      val rectF = RectF()
      fillPath.computeBounds(rectF, true)
      val matrix = Matrix()
      val scale = minOf( size.width / rectF.width(), size.height / rectF.height() )
      matrix.setScale(scale, scale)
      fillPath.transform(matrix)
      val composePathFill = fillPath.asComposePath()

      drawPath(path = composePathFill, color = Color(red = 1f, green = 1f, blue = 1f, alpha = 1f), style = Fill)
      drawPath(path = composePathFill, color = Color.Transparent, style = Stroke(width = 3f, miter = 4f, join = StrokeJoin.Round))
    }
Canvas(
      modifier = Modifier
      .width(6.899269104003906.dp)
      .height(6.931037902832031.dp)
      //.fillMaxWidth()
      //.aspectRatio(1f)
      .align(Alignment.Center)
    ) {
      val fillPath = PathParser.createPathFromPathData("M 6.899269104003906 3.4655189514160156 C 6.899269104003906 5.3794721195861595 5.35482189227154 6.931037902832031 3.4496404220917016 6.931037902832031 C 1.5444589519118637 6.931037902832031 0 5.3794721195861595 0 3.4655189514160156 C 0 1.5515657832458718 1.5444589519118637 0 3.4496404220917016 0 C 5.35482189227154 0 6.899269104003906 1.5515657832458718 6.899269104003906 3.4655189514160156 Z ")
      //fillPath.fillType = Path.FillType.EVEN_ODD
      val rectF = RectF()
      fillPath.computeBounds(rectF, true)
      val matrix = Matrix()
      val scale = minOf( size.width / rectF.width(), size.height / rectF.height() )
      matrix.setScale(scale, scale)
      fillPath.transform(matrix)
      val composePathFill = fillPath.asComposePath()

      drawPath(path = composePathFill, color = Color(red = 0.32549020648002625f, green = 0.7960784435272217f, blue = 0.5960784554481506f, alpha = 0.6299999952316284f), style = Fill)
      drawPath(path = composePathFill, color = Color.Transparent, style = Stroke(width = 3f, miter = 4f, join = StrokeJoin.Round))
    }
Canvas(
      modifier = Modifier
      .width(4.206329345703125.dp)
      .height(4.225719451904297.dp)
      //.fillMaxWidth()
      //.aspectRatio(1f)
      .align(Alignment.Center)
    ) {
      val fillPath = PathParser.createPathFromPathData("M 4.206329345703125 2.1128597259521484 C 4.206329345703125 3.279760801466944 3.264717184452244 4.225719451904297 2.103170542907336 4.225719451904297 C 0.9416239013624284 4.225719451904297 0 3.279760801466944 0 2.1128597259521484 C 0 0.9459586504373527 0.9416239013624284 0 2.103170542907336 0 C 3.264717184452244 0 4.206329345703125 0.9459586504373527 4.206329345703125 2.1128597259521484 Z ")
      //fillPath.fillType = Path.FillType.EVEN_ODD
      val rectF = RectF()
      fillPath.computeBounds(rectF, true)
      val matrix = Matrix()
      val scale = minOf( size.width / rectF.width(), size.height / rectF.height() )
      matrix.setScale(scale, scale)
      fillPath.transform(matrix)
      val composePathFill = fillPath.asComposePath()

      drawPath(path = composePathFill, color = Color(red = 0.32549020648002625f, green = 0.7960784435272217f, blue = 0.5960784554481506f, alpha = 0.6299999952316284f), style = Fill)
      drawPath(path = composePathFill, color = Color.Transparent, style = Stroke(width = 3f, miter = 4f, join = StrokeJoin.Round))
    }
Canvas(
      modifier = Modifier
      .width(4.2063751220703125.dp)
      .height(4.2257232666015625.dp)
      //.fillMaxWidth()
      //.aspectRatio(1f)
      .align(Alignment.Center)
    ) {
      val fillPath = PathParser.createPathFromPathData("M 4.2063751220703125 2.1128616333007812 C 4.2063751220703125 3.279763762215925 3.264746843384242 4.2257232666015625 2.1031875610351562 4.2257232666015625 C 0.9416282786860704 4.2257232666015625 0 3.279763762215925 0 2.1128616333007812 C 0 0.9459595043856373 0.9416282786860704 0 2.1031875610351562 0 C 3.264746843384242 0 4.2063751220703125 0.9459595043856373 4.2063751220703125 2.1128616333007812 Z ")
      //fillPath.fillType = Path.FillType.EVEN_ODD
      val rectF = RectF()
      fillPath.computeBounds(rectF, true)
      val matrix = Matrix()
      val scale = minOf( size.width / rectF.width(), size.height / rectF.height() )
      matrix.setScale(scale, scale)
      fillPath.transform(matrix)
      val composePathFill = fillPath.asComposePath()

      drawPath(path = composePathFill, color = Color(red = 0.32549020648002625f, green = 0.7960784435272217f, blue = 0.5960784554481506f, alpha = 0.6299999952316284f), style = Fill)
      drawPath(path = composePathFill, color = Color.Transparent, style = Stroke(width = 3f, miter = 4f, join = StrokeJoin.Round))
    }
Canvas(
      modifier = Modifier
      .width(73.6705093383789.dp)
      .height(0.386474609375.dp)
      //.fillMaxWidth()
      //.aspectRatio(1f)
      .align(Alignment.Center)
    ) {
      val fillPath = PathParser.createPathFromPathData("M 0.19235119931691622 0.386474609375 L 73.47815813906199 0.386474609375 C 73.52917285083234 0.386474609375 73.57809534173617 0.3661129354277364 73.61416818813954 0.3298739120364189 C 73.65024103454292 0.29363488864510146 73.6705093383789 0.24448702622248675 73.6705093383789 0.1932373046875 C 73.6705093383789 0.14198758315251325 73.65024103454292 0.09283972072989854 73.61416818813954 0.056600697338581085 C 73.57809534173617 0.020361673947263625 73.52917285083234 0 73.47815813906199 0 L 0.19235119931691622 0 C 0.14133648754656325 0 0.09241399664274415 0.020361673947263625 0.05634115023937261 0.056600697338581085 C 0.020268303836001075 0.09283972072989854 0 0.14198758315251325 0 0.1932373046875 C 0 0.24448702622248675 0.020268303836001075 0.29363488864510146 0.05634115023937261 0.3298739120364189 C 0.09241399664274415 0.3661129354277364 0.14133648754656325 0.386474609375 0.19235119931691622 0.386474609375 Z ")
      //fillPath.fillType = Path.FillType.EVEN_ODD
      val rectF = RectF()
      fillPath.computeBounds(rectF, true)
      val matrix = Matrix()
      val scale = minOf( size.width / rectF.width(), size.height / rectF.height() )
      matrix.setScale(scale, scale)
      fillPath.transform(matrix)
      val composePathFill = fillPath.asComposePath()

      drawPath(path = composePathFill, color = Color(red = 0.7960784435272217f, green = 0.7960784435272217f, blue = 0.7960784435272217f, alpha = 1f), style = Fill)
      drawPath(path = composePathFill, color = Color.Transparent, style = Stroke(width = 3f, miter = 4f, join = StrokeJoin.Round))
    }
Canvas(
      modifier = Modifier
      .width(11.386627197265625.dp)
      .height(13.53633975982666.dp)
      //.fillMaxWidth()
      //.aspectRatio(1f)
      .align(Alignment.Center)
    ) {
      val fillPath = PathParser.createPathFromPathData("M 11.359074423792014 3.226211728161088 C 11.45530116666951 2.5398532037571764 11.297569644313235 1.841879983576166 10.915764606966006 1.2645474169837536 C 10.533959569618776 0.6872148503913412 9.954605319738706 0.27063618575296366 9.287493285058355 0.09375134609510699 C 8.620381250378005 -0.08313349356274968 7.911858883035427 -0.008037425868940296 7.296179869249468 0.30481213080245334 C 6.68050085546351 0.617661687473847 6.200440967772235 1.1465293222001502 5.946973016249505 1.7911953167212287 L 0 8.640341099541418 L 1.744933653734982 13.53633975982666 L 7.725718435674606 5.533379410905089 C 8.115990585228325 5.658972180586565 8.5289251202648 5.6970721161177265 8.935440015006407 5.644994157308596 C 9.341954909748013 5.5929161984994655 9.732163474214481 5.451927661279494 10.078571200242946 5.231960034727012 C 10.424978926271411 5.011992408174531 10.71915587130069 4.718397516631526 10.940395539055544 4.371853626292272 C 11.161635206810399 4.025309735953018 11.304555112775901 3.634245417445333 11.359074423792014 3.226211728161088 Z ")
      //fillPath.fillType = Path.FillType.EVEN_ODD
      val rectF = RectF()
      fillPath.computeBounds(rectF, true)
      val matrix = Matrix()
      val scale = minOf( size.width / rectF.width(), size.height / rectF.height() )
      matrix.setScale(scale, scale)
      fillPath.transform(matrix)
      val composePathFill = fillPath.asComposePath()

      drawPath(path = composePathFill, color = Color(red = 1f, green = 0.7176470756530762f, blue = 0.7176470756530762f, alpha = 1f), style = Fill)
      drawPath(path = composePathFill, color = Color.Transparent, style = Stroke(width = 3f, miter = 4f, join = StrokeJoin.Round))
    }
Canvas(
      modifier = Modifier
      .width(27.422752380371094.dp)
      .height(25.41777801513672.dp)
      //.fillMaxWidth()
      //.aspectRatio(1f)
      .align(Alignment.Center)
    ) {
      val fillPath = PathParser.createPathFromPathData("M 7.681933108860878 25.41777801513672 L 27.422752380371094 4.252753224172212 L 24.760030997789144 0 L 0 21.036525133548214 L 7.681933108860878 25.41777801513672 Z ")
      //fillPath.fillType = Path.FillType.EVEN_ODD
      val rectF = RectF()
      fillPath.computeBounds(rectF, true)
      val matrix = Matrix()
      val scale = minOf( size.width / rectF.width(), size.height / rectF.height() )
      matrix.setScale(scale, scale)
      fillPath.transform(matrix)
      val composePathFill = fillPath.asComposePath()

      drawPath(path = composePathFill, color = Color(red = 0.24705882370471954f, green = 0.239215686917305f, blue = 0.33725491166114807f, alpha = 1f), style = Fill)
      drawPath(path = composePathFill, color = Color.Transparent, style = Stroke(width = 3f, miter = 4f, join = StrokeJoin.Round))
    }
Canvas(
      modifier = Modifier
      .width(13.849273681640625.dp)
      .height(13.913047790527344.dp)
      //.fillMaxWidth()
      //.aspectRatio(1f)
      .align(Alignment.Center)
    ) {
      val fillPath = PathParser.createPathFromPathData("M 13.849273681640625 6.956523895263672 C 13.849273681640625 10.798506098527367 10.749008309537505 13.913047790527344 6.9246368408203125 13.913047790527344 C 3.1002653721031193 13.913047790527344 0 10.798506098527367 0 6.956523895263672 C 0 3.1145416919999764 3.1002653721031193 0 6.9246368408203125 0 C 10.749008309537505 0 13.849273681640625 3.1145416919999764 13.849273681640625 6.956523895263672 Z ")
      //fillPath.fillType = Path.FillType.EVEN_ODD
      val rectF = RectF()
      fillPath.computeBounds(rectF, true)
      val matrix = Matrix()
      val scale = minOf( size.width / rectF.width(), size.height / rectF.height() )
      matrix.setScale(scale, scale)
      fillPath.transform(matrix)
      val composePathFill = fillPath.asComposePath()

      drawPath(path = composePathFill, color = Color(red = 0.18431372940540314f, green = 0.18039216101169586f, blue = 0.2549019753932953f, alpha = 1f), style = Fill)
      drawPath(path = composePathFill, color = Color.Transparent, style = Stroke(width = 3f, miter = 4f, join = StrokeJoin.Round))
    }
Canvas(
      modifier = Modifier
      .width(17.15087127685547.dp)
      .height(19.376792907714844.dp)
      //.fillMaxWidth()
      //.aspectRatio(1f)
      .align(Alignment.Center)
    ) {
      val fillPath = PathParser.createPathFromPathData("M 0 4.033669527477325 C 1.4900630082048014 2.5156877218331246 3.293236762193186 1.3442890350335164 5.282569976376223 0.6019404837980926 C 6.559528774084919 0.12669225166150366 7.9494250117211 -0.166937520910808 9.284425852745047 0.1029619470854129 C 10.619472829056008 0.3728478931796079 11.88196867288682 1.3006548477273436 12.25441274556068 2.616536785343472 C 12.558954893634102 3.6925481974131866 12.244502968458123 4.851080621668164 11.77184388036282 5.863980917182198 C 11.29923670593044 6.876881212696233 10.668218726688087 7.816150305807282 10.286005140107829 8.866851573700078 C 9.89601869779816 9.938934677428621 9.778731872031404 11.09189156306975 9.944799930657522 12.221060221097915 C 10.11086798928364 13.35022887912608 10.555028849695619 14.419852240608767 11.236960718178738 15.33283254476323 C 11.918892586661856 16.245812848917694 12.817004962910417 16.973238887076235 13.849763999794009 17.44907738363788 C 14.8825230366776 17.924915880199528 16.01722656606405 18.134098690972227 17.15087127685547 18.057636135891563 C 15.839162243636078 18.234325965827665 14.630017731826545 18.85357788197102 13.347894258419007 19.183206816200446 C 12.06577078501147 19.512820293536755 10.552505763129322 19.490470225016256 9.599720457741 18.567701261646725 C 8.591607203029586 17.591386395536837 8.571410483681102 16.004001066595265 8.620165771174033 14.59814038470349 C 8.692627075131876 12.508297117123277 8.765088430682361 10.418446293863568 8.83754717220565 8.328586440645434 C 8.874505552731828 7.262801087919691 8.906061421211875 6.1628589038933415 8.52342658644188 5.168097675574545 C 8.140839836014266 4.173338382246839 7.2315818669108305 3.302264043367089 6.170081555139784 3.311322979145201 C 5.365549105385636 3.3181751518865306 4.653484703364795 3.8077988928273214 4.008336462530492 4.290645189979578 C 3.3630959052620337 4.773501162087288 2.680238946312053 5.288664799322356 1.8788534184216794 5.360479281206273 C 1.0775178780689263 5.432305355760027 0.1625307581700941 4.836529304382155 0.22250012488394905 4.030535210480321 L 0 4.033669527477325 Z ")
      //fillPath.fillType = Path.FillType.EVEN_ODD
      val rectF = RectF()
      fillPath.computeBounds(rectF, true)
      val matrix = Matrix()
      val scale = minOf( size.width / rectF.width(), size.height / rectF.height() )
      matrix.setScale(scale, scale)
      fillPath.transform(matrix)
      val composePathFill = fillPath.asComposePath()

      drawPath(path = composePathFill, color = Color(red = 0.18431372940540314f, green = 0.18039216101169586f, blue = 0.2549019753932953f, alpha = 1f), style = Fill)
      drawPath(path = composePathFill, color = Color.Transparent, style = Stroke(width = 3f, miter = 4f, join = StrokeJoin.Round))
    }
Canvas(
      modifier = Modifier
      .width(12.4913330078125.dp)
      .height(12.124275207519531.dp)
      //.fillMaxWidth()
      //.aspectRatio(1f)
      .align(Alignment.Center)
    ) {
      val fillPath = PathParser.createPathFromPathData("M 3.572718736456528 12.02096358789132 C 2.9079375345562655 12.206489781925727 2.1985098544922805 12.140593502004025 1.578860880651954 11.835758683156826 C 0.9592119068116275 11.530923864309626 0.4723951447831596 11.008334027473724 0.210660379118917 10.367010546400076 C -0.05107438654532559 9.725687065326428 -0.06953898199119088 9.010188521600098 0.15875704881896435 8.356099022819942 C 0.3870530796291196 7.702009524039786 0.8462539144481707 7.154772219571233 1.449343136846515 6.818083331741999 L 7.43155149939462 0 L 12.4913330078125 1.0981791050872969 L 5.374859656543235 8.100706613272674 C 5.549800736688792 8.473001703894806 5.641351477577233 8.879304233189302 5.643075780504492 9.290992812770215 C 5.64480008343175 9.702681392351128 5.556655132286909 10.109741378878798 5.384838808489618 10.483502225955739 C 5.213022484692327 10.85726307303268 4.961722972333303 11.188632967263219 4.648635678779273 11.45426818795912 C 4.335548385225244 11.71990340865502 3.968286266081481 11.913344261386442 3.572730476635288 12.02096358789132 L 3.572718736456528 12.02096358789132 Z ")
      //fillPath.fillType = Path.FillType.EVEN_ODD
      val rectF = RectF()
      fillPath.computeBounds(rectF, true)
      val matrix = Matrix()
      val scale = minOf( size.width / rectF.width(), size.height / rectF.height() )
      matrix.setScale(scale, scale)
      fillPath.transform(matrix)
      val composePathFill = fillPath.asComposePath()

      drawPath(path = composePathFill, color = Color(red = 1f, green = 0.7176470756530762f, blue = 0.7176470756530762f, alpha = 1f), style = Fill)
      drawPath(path = composePathFill, color = Color.Transparent, style = Stroke(width = 3f, miter = 4f, join = StrokeJoin.Round))
    }
Canvas(
      modifier = Modifier
      .width(19.454971313476562.dp)
      .height(29.505889892578125.dp)
      //.fillMaxWidth()
      //.aspectRatio(1f)
      .align(Alignment.Center)
    ) {
      val fillPath = PathParser.createPathFromPathData("M 19.454971313476562 10.703961481338977 L 4.544876570914611 29.505889892578125 L 0 27.40965974341585 L 17.525108581482822 0 L 19.454971313476562 10.703961481338977 Z ")
      //fillPath.fillType = Path.FillType.EVEN_ODD
      val rectF = RectF()
      fillPath.computeBounds(rectF, true)
      val matrix = Matrix()
      val scale = minOf( size.width / rectF.width(), size.height / rectF.height() )
      matrix.setScale(scale, scale)
      fillPath.transform(matrix)
      val composePathFill = fillPath.asComposePath()

      drawPath(path = composePathFill, color = Color(red = 0.24705882370471954f, green = 0.239215686917305f, blue = 0.33725491166114807f, alpha = 1f), style = Fill)
      drawPath(path = composePathFill, color = Color.Transparent, style = Stroke(width = 3f, miter = 4f, join = StrokeJoin.Round))
    }
Canvas(
      modifier = Modifier
      .width(3.553497314453125.dp)
      .height(12.167350769042969.dp)
      //.fillMaxWidth()
      //.aspectRatio(1f)
      .align(Alignment.Center)
    ) {
      val fillPath = PathParser.createPathFromPathData("M 3.553497314453125 0.05603443417848672 L 0 0 L 0.42740679130272957 12.167350769042969 L 3.55291030590867 12.167350769042969 L 3.553497314453125 0.05603443417848672 Z ")
      //fillPath.fillType = Path.FillType.EVEN_ODD
      val rectF = RectF()
      fillPath.computeBounds(rectF, true)
      val matrix = Matrix()
      val scale = minOf( size.width / rectF.width(), size.height / rectF.height() )
      matrix.setScale(scale, scale)
      fillPath.transform(matrix)
      val composePathFill = fillPath.asComposePath()

      drawPath(path = composePathFill, color = Color(red = 1f, green = 0.7176470756530762f, blue = 0.7176470756530762f, alpha = 1f), style = Fill)
      drawPath(path = composePathFill, color = Color.Transparent, style = Stroke(width = 3f, miter = 4f, join = StrokeJoin.Round))
    }
Canvas(
      modifier = Modifier
      .width(10.078460693359375.dp)
      .height(4.069175720214844.dp)
      //.fillMaxWidth()
      //.aspectRatio(1f)
      .align(Alignment.Center)
    ) {
      val fillPath = PathParser.createPathFromPathData("M 10.078460693359375 0.00024767890614442234 L 3.9229893176781543 0 L 3.9227427733846594 0 C 2.8823936361738283 0.000058417183018711216 1.8846685035909578 0.41525976246453133 1.1490255499340973 1.1542780565020154 C 0.4133825962772367 1.8932963505394995 0.00007243344035210277 2.89559962536976 0 3.9407365160285224 L 0 4.068798304738815 L 10.07827285008814 4.069175720214844 L 10.078460693359375 0.00024767890614442234 Z ")
      //fillPath.fillType = Path.FillType.EVEN_ODD
      val rectF = RectF()
      fillPath.computeBounds(rectF, true)
      val matrix = Matrix()
      val scale = minOf( size.width / rectF.width(), size.height / rectF.height() )
      matrix.setScale(scale, scale)
      fillPath.transform(matrix)
      val composePathFill = fillPath.asComposePath()

      drawPath(path = composePathFill, color = Color(red = 0.18431372940540314f, green = 0.18039216101169586f, blue = 0.2549019753932953f, alpha = 1f), style = Fill)
      drawPath(path = composePathFill, color = Color.Transparent, style = Stroke(width = 3f, miter = 4f, join = StrokeJoin.Round))
    }
Canvas(
      modifier = Modifier
      .width(10.395034790039062.dp)
      .height(11.888114929199219.dp)
      //.fillMaxWidth()
      //.aspectRatio(1f)
      .align(Alignment.Center)
    ) {
      val fillPath = PathParser.createPathFromPathData("M 3.881830939925353 0 L 0 2.50357359829363 L 7.764824157408366 11.888114929199219 L 10.395034790039062 10.19169144925818 L 3.881830939925353 0 Z ")
      //fillPath.fillType = Path.FillType.EVEN_ODD
      val rectF = RectF()
      fillPath.computeBounds(rectF, true)
      val matrix = Matrix()
      val scale = minOf( size.width / rectF.width(), size.height / rectF.height() )
      matrix.setScale(scale, scale)
      fillPath.transform(matrix)
      val composePathFill = fillPath.asComposePath()

      drawPath(path = composePathFill, color = Color(red = 1f, green = 0.7176470756530762f, blue = 0.7176470756530762f, alpha = 1f), style = Fill)
      drawPath(path = composePathFill, color = Color.Transparent, style = Stroke(width = 3f, miter = 4f, join = StrokeJoin.Round))
    }
Canvas(
      modifier = Modifier
      .width(9.171463012695312.dp)
      .height(8.8939208984375.dp)
      //.fillMaxWidth()
      //.aspectRatio(1f)
      .align(Alignment.Center)
    ) {
      val fillPath = PathParser.createPathFromPathData("M 6.983337224997635 0 L 1.803493155075536 3.3408137567791765 L 1.8032818315671013 3.340931699211757 C 0.927876949484378 3.9056516763637834 0.3116020336009392 4.796576188548347 0.0900234419795907 5.817734577638435 C -0.13155514964175777 6.8388929667285225 0.05971035616690845 7.906653820204474 0.6217368753237369 8.786156897789004 L 0.6905931184887227 8.8939208984375 L 9.171463012695312 3.4240221429644815 L 6.983337224997635 0 Z ")
      //fillPath.fillType = Path.FillType.EVEN_ODD
      val rectF = RectF()
      fillPath.computeBounds(rectF, true)
      val matrix = Matrix()
      val scale = minOf( size.width / rectF.width(), size.height / rectF.height() )
      matrix.setScale(scale, scale)
      fillPath.transform(matrix)
      val composePathFill = fillPath.asComposePath()

      drawPath(path = composePathFill, color = Color(red = 0.18431372940540314f, green = 0.18039216101169586f, blue = 0.2549019753932953f, alpha = 1f), style = Fill)
      drawPath(path = composePathFill, color = Color.Transparent, style = Stroke(width = 3f, miter = 4f, join = StrokeJoin.Round))
    }
Canvas(
      modifier = Modifier
      .width(33.09228515625.dp)
      .height(45.054744720458984.dp)
      //.fillMaxWidth()
      //.aspectRatio(1f)
      .align(Alignment.Center)
    ) {
      val fillPath = PathParser.createPathFromPathData("M 30.39568280570115 29.181252432484776 C 30.39568280570115 29.181252432484776 21.770733321131903 0.4030153699352256 18.998913093511028 0.014120676879239161 C 16.227092865890153 -0.3747740161767472 11.761114513212947 7.398283394615219 11.761114513212947 7.398283394615219 C 5.97076807955902 14.820159677643467 0 38.8612569479154 0 38.8612569479154 C 0 38.8612569479154 9.953510277960259 39.486967534335534 17.229538558905396 43.37592413985198 C 24.505566839850534 47.26488074536843 33.09228515625 43.1790548061569 33.09228515625 43.1790548061569 L 30.39568280570115 29.181252432484776 Z ")
      //fillPath.fillType = Path.FillType.EVEN_ODD
      val rectF = RectF()
      fillPath.computeBounds(rectF, true)
      val matrix = Matrix()
      val scale = minOf( size.width / rectF.width(), size.height / rectF.height() )
      matrix.setScale(scale, scale)
      fillPath.transform(matrix)
      val composePathFill = fillPath.asComposePath()

      drawPath(path = composePathFill, color = Color(red = 0.24705882370471954f, green = 0.239215686917305f, blue = 0.33725491166114807f, alpha = 1f), style = Fill)
      drawPath(path = composePathFill, color = Color.Transparent, style = Stroke(width = 3f, miter = 4f, join = StrokeJoin.Round))
    }
Canvas(
      modifier = Modifier
      .width(33.09228515625.dp)
      .height(45.05461120605469.dp)
      //.fillMaxWidth()
      //.aspectRatio(1f)
      .align(Alignment.Center)
    ) {
      val fillPath = PathParser.createPathFromPathData("M 30.39568280570115 29.181115222866904 C 30.39568280570115 29.181115222866904 21.770733321131903 0.40287808656662494 18.998913093511028 0.01398337521786125 C 16.227092865890153 -0.37491133613090244 12.895415655199878 7.477026467247685 12.895415655199878 7.477026467247685 C 10.01014858362129 19.457703050571077 0 38.8611201936243 0 38.8611201936243 C 0 38.8611201936243 9.953510277960259 39.48683080947653 17.229538558905396 43.3757875979212 C 24.505566839850534 47.26474438636588 33.09228515625 43.17891825496581 33.09228515625 43.17891825496581 L 30.39568280570115 29.181115222866904 Z ")
      //fillPath.fillType = Path.FillType.EVEN_ODD
      val rectF = RectF()
      fillPath.computeBounds(rectF, true)
      val matrix = Matrix()
      val scale = minOf( size.width / rectF.width(), size.height / rectF.height() )
      matrix.setScale(scale, scale)
      fillPath.transform(matrix)
      val composePathFill = fillPath.asComposePath()

      drawPath(path = composePathFill, color = Color(red = 0f, green = 0f, blue = 0f, alpha = 1f), style = Fill)
      drawPath(path = composePathFill, color = Color.Transparent, style = Stroke(width = 3f, miter = 4f, join = StrokeJoin.Round))
    }
Canvas(
      modifier = Modifier
      .width(32.69971466064453.dp)
      .height(59.25044631958008.dp)
      //.fillMaxWidth()
      //.aspectRatio(1f)
      .align(Alignment.Center)
    ) {
      val fillPath = PathParser.createPathFromPathData("M 22.542222039257553 2.0061874312658614 L 22.542222039257553 16.467056618145637 L 24.23626062073724 37.41468970819564 L 32.69971466064453 53.2601076280554 L 28.6603388688706 56.1586586078254 L 17.11926517808793 41.086187615904315 L 12.554574707059771 26.12019496970817 L 5.385840259125547 59.25044631958008 L 0 58.86397285561074 L 3.7404647538668585 12.929470444748118 L 10.838417612769376 0 L 22.542222039257553 2.0061874312658614 Z ")
      //fillPath.fillType = Path.FillType.EVEN_ODD
      val rectF = RectF()
      fillPath.computeBounds(rectF, true)
      val matrix = Matrix()
      val scale = minOf( size.width / rectF.width(), size.height / rectF.height() )
      matrix.setScale(scale, scale)
      fillPath.transform(matrix)
      val composePathFill = fillPath.asComposePath()

      drawPath(path = composePathFill, color = Color(red = 0.18431372940540314f, green = 0.18039216101169586f, blue = 0.2549019753932953f, alpha = 1f), style = Fill)
      drawPath(path = composePathFill, color = Color.Transparent, style = Stroke(width = 3f, miter = 4f, join = StrokeJoin.Round))
    }
Canvas(
      modifier = Modifier
      .width(16.35297393798828.dp)
      .height(22.41545867919922.dp)
      //.fillMaxWidth()
      //.aspectRatio(1f)
      .align(Alignment.Center)
    ) {
      val fillPath = PathParser.createPathFromPathData("M 3.2699702097628984 6.570048233558392 C 0.5770535664287468 9.275362212082436 3.0776190209533163 12.173912903358197 3.0776190209533163 12.173912903358197 L 0 19.130434562420024 L 12.118124895003684 22.41545867919922 L 16.35297393798828 3.4051660707858713 L 13.467706105844547 0.3133786667583928 C 7.697170441557079 0.1201419540066754 7.6940475523832905 0 7.6940475523832905 0 C 6.6830074129192 0.9939767658619343 3.2699702097628984 6.570048233558392 3.2699702097628984 6.570048233558392 Z ")
      //fillPath.fillType = Path.FillType.EVEN_ODD
      val rectF = RectF()
      fillPath.computeBounds(rectF, true)
      val matrix = Matrix()
      val scale = minOf( size.width / rectF.width(), size.height / rectF.height() )
      matrix.setScale(scale, scale)
      fillPath.transform(matrix)
      val composePathFill = fillPath.asComposePath()

      drawPath(path = composePathFill, color = Color(red = 0.32549020648002625f, green = 0.7960784435272217f, blue = 0.5960784554481506f, alpha = 1f), style = Fill)
      drawPath(path = composePathFill, color = Color.Transparent, style = Stroke(width = 3f, miter = 4f, join = StrokeJoin.Round))
    }
Canvas(
      modifier = Modifier
      .width(19.76410675048828.dp)
      .height(42.71498107910156.dp)
      //.fillMaxWidth()
      //.aspectRatio(1f)
      .align(Alignment.Center)
    ) {
      val fillPath = PathParser.createPathFromPathData("M 11.13973830795114 1.0153470465409602 C 10.5893577452823 0.6072109573994087 9.963831424536387 0.31284012170318976 9.299404528285539 0.14927875033241728 C 8.63497763203469 -0.014282621038355203 7.944851868478472 -0.04378392098472511 7.268997041926142 0.06249088844066322 C 6.593142215373812 0.16876569786605156 5.944996121946217 0.40870212020997787 5.362096741127096 0.7683993381921707 C 4.7791973603079745 1.1280965561743634 4.273134508638537 1.600406636537074 3.873217345870729 2.157972301683374 C 0.8267786162439097 6.419276800955613 -1.9901156981155363 13.300220814694079 1.891097085313056 21.88198747735631 C 8.123073438718523 35.66161513781676 13.546288701620762 42.715705216715534 15.751003917609115 42.71495159351766 C 15.847260443898989 42.71576533606464 15.942994692160209 42.70065601206787 16.03436518905825 42.67022785985845 C 17.391438275451506 42.2077061179972 19.35355217131625 39.90075937793931 19.708763485920365 37.86780466199677 C 19.835932705612834 37.140148595779785 19.805690877042498 36.12659201524991 18.93945219177391 35.430638342058515 C 16.4512823331228 33.431374407134584 11.9844685030766 27.206189042187965 10.59104869979541 19.012497629162485 C 9.820987592612251 14.485021235479815 11.314333121959898 10.360902838138957 12.70267483364756 7.698525996943868 C 13.289093015964738 6.596905974761101 13.460650261692605 5.319865433291839 13.185889391634587 4.1014911602561535 C 12.91112852157657 2.883116887220468 12.208457881454928 1.8050398137873915 11.206692622297941 1.064882827492616 L 11.206692622297941 1.064882827492616 L 11.13973830795114 1.0153470465409602 Z ")
      //fillPath.fillType = Path.FillType.EVEN_ODD
      val rectF = RectF()
      fillPath.computeBounds(rectF, true)
      val matrix = Matrix()
      val scale = minOf( size.width / rectF.width(), size.height / rectF.height() )
      matrix.setScale(scale, scale)
      fillPath.transform(matrix)
      val composePathFill = fillPath.asComposePath()

      drawPath(path = composePathFill, color = Color(red = 0.24705882370471954f, green = 0.239215686917305f, blue = 0.33725491166114807f, alpha = 1f), style = Fill)
      drawPath(path = composePathFill, color = Color.Transparent, style = Stroke(width = 3f, miter = 4f, join = StrokeJoin.Round))
    }
Canvas(
      modifier = Modifier
      .width(10.205487251281738.dp)
      .height(10.230818748474121.dp)
      //.fillMaxWidth()
      //.aspectRatio(1f)
      .align(Alignment.Center)
    ) {
      val fillPath = PathParser.createPathFromPathData("M 10.205487251281738 5.115413792422846 C 10.205487251281738 7.940577037837258 7.920910958277416 10.230818748474121 5.102743625640869 10.230818748474121 C 2.284576293004322 10.230818748474121 0 7.940577037837258 0 5.115413792422846 C 0 2.2902505470084336 2.284576293004322 0 5.102743625640869 0 C 7.920910958277416 0 10.205487251281738 2.2902505470084336 10.205487251281738 5.115413792422846 Z ")
      //fillPath.fillType = Path.FillType.EVEN_ODD
      val rectF = RectF()
      fillPath.computeBounds(rectF, true)
      val matrix = Matrix()
      val scale = minOf( size.width / rectF.width(), size.height / rectF.height() )
      matrix.setScale(scale, scale)
      fillPath.transform(matrix)
      val composePathFill = fillPath.asComposePath()

      drawPath(path = composePathFill, color = Color(red = 1f, green = 0.7176470756530762f, blue = 0.7176470756530762f, alpha = 1f), style = Fill)
      drawPath(path = composePathFill, color = Color.Transparent, style = Stroke(width = 3f, miter = 4f, join = StrokeJoin.Round))
    }
Canvas(
      modifier = Modifier
      .width(12.037147521972656.dp)
      .height(5.629299163818359.dp)
      //.fillMaxWidth()
      //.aspectRatio(1f)
      .align(Alignment.Center)
    ) {
      val fillPath = PathParser.createPathFromPathData("M 0 5.629299163818359 L 7.36041628843583 5.629299163818359 L 7.435917310300546 4.567694314831894 L 7.813293277773636 5.629299163818359 L 8.946642157688462 5.629299163818359 L 9.09621190089426 3.525237403834103 L 9.844178018605515 5.629299163818359 L 12.037147521972656 5.629299163818359 L 12.037147521972656 5.525055831565268 C 12.035512271638764 4.060232494030103 11.455552887440435 2.6558708199422343 10.424518014378592 1.6200794936866123 C 9.393483141316748 0.5842881674309901 7.995574248140689 0.0016545643392674573 6.537465716261826 0 L 5.499728766383735 0 C 4.041614914741145 0.001651987590085578 2.643696390958338 0.5842831917387579 1.6126529879305176 1.6200735965698927 C 0.581609584902697 2.6558640014010275 0.0016459446784166372 4.0602271497680755 0 5.525055831565268 L 0 5.629299163818359 Z ")
      //fillPath.fillType = Path.FillType.EVEN_ODD
      val rectF = RectF()
      fillPath.computeBounds(rectF, true)
      val matrix = Matrix()
      val scale = minOf( size.width / rectF.width(), size.height / rectF.height() )
      matrix.setScale(scale, scale)
      fillPath.transform(matrix)
      val composePathFill = fillPath.asComposePath()

      drawPath(path = composePathFill, color = Color(red = 0.18431372940540314f, green = 0.18039216101169586f, blue = 0.2549019753932953f, alpha = 1f), style = Fill)
      drawPath(path = composePathFill, color = Color.Transparent, style = Stroke(width = 3f, miter = 4f, join = StrokeJoin.Round))
    }
Canvas(
      modifier = Modifier
      .width(5.9329376220703125.dp)
      .height(8.745878219604492.dp)
      //.fillMaxWidth()
      //.aspectRatio(1f)
      .align(Alignment.Center)
    ) {
      val fillPath = PathParser.createPathFromPathData("M 2.791904348297029 8.68682156381258 L 5.9329376220703125 7.66291732177972 L 5.9329376220703125 0 L 0 0 L 0.14688116169996018 0.14733056667604277 C 2.190537317218005 2.1977474183152768 4.463442507537922 9.472361386433866 2.791904348297029 8.68682156381258 Z ")
      //fillPath.fillType = Path.FillType.EVEN_ODD
      val rectF = RectF()
      fillPath.computeBounds(rectF, true)
      val matrix = Matrix()
      val scale = minOf( size.width / rectF.width(), size.height / rectF.height() )
      matrix.setScale(scale, scale)
      fillPath.transform(matrix)
      val composePathFill = fillPath.asComposePath()

      drawPath(path = composePathFill, color = Color(red = 0.18431372940540314f, green = 0.18039216101169586f, blue = 0.2549019753932953f, alpha = 1f), style = Fill)
      drawPath(path = composePathFill, color = Color.Transparent, style = Stroke(width = 3f, miter = 4f, join = StrokeJoin.Round))
    }
Box(
        
        
        modifier = Modifier
        
        .width(157.dp)
        .height(130.dp)
        .clip(RoundedCornerShape(topStart = 0.dp, topEnd = 0.dp, bottomStart = 0.dp, bottomEnd = 0.dp))
        .background(Color.Transparent)
        
        .padding(start = 20.dp, top = 31.dp, end = 103.dp, bottom = 55.dp)
        .align(Alignment.Center)
        .alpha(1f)
        
        
        ) {
}
}

Canvas(
      modifier = Modifier
      .width(469.dp)
      .height(97.dp)
      //.fillMaxWidth()
      //.aspectRatio(1f)
      .align(Alignment.TopStart)
    ) {
      val fillPath = PathParser.createPathFromPathData("M 0 54.98768186384843 L 5.471666666666667 43.31759052483827 C 11.334166666666667 31.64750215368506 22.277499999999996 8.307326524324983 33.611666666666665 5.973308850094341 C 44.555 3.6392911758636983 55.88916666666666 22.31143294069096 66.8325 19.977415266460316 C 78.16666666666666 17.64339759222967 89.50083333333333 -5.696779335567814 100.44416666666666 1.3052736871241148 C 111.77833333333332 8.307326709816044 122.72166666666668 45.65161116692586 134.05583333333334 52.653664189617785 C 144.99916666666667 59.65571721230971 156.33333333333331 36.31553898607481 167.6675 22.31143294069096 C 178.61083333333332 8.307326895307103 189.945 3.639291546845815 200.88833333333332 17.64339759222967 C 212.2225 31.64750363761353 223.16583333333332 64.32375256077101 234.5 71.32580558346294 C 245.83416666666668 78.32785860615486 256.77750000000003 59.65571721230972 268.1116666666667 54.98768186384843 C 279.055 50.31964651538714 290.38916666666665 59.65571721230971 301.3325 64.323752560771 C 312.66666666666663 68.99178790923229 324.00083333333333 68.9917879092323 334.94416666666666 71.32580558346294 C 346.2783333333333 73.65982325769357 357.2216666666667 78.32785860615486 368.55583333333334 61.98973488654036 C 379.49916666666667 45.65161116692586 390.8333333333333 8.307326524324983 402.16749999999996 5.973308850094341 C 413.1108333333333 3.6392911758636983 424.445 36.31554047000329 435.3883333333333 50.31964651538715 C 446.72249999999997 64.323752560771 457.6658333333333 59.65571721230972 463.5283333333333 57.32169953807907 L 469 54.98768186384843 L 469 97 L 463.5283333333333 97 C 457.6658333333333 97 446.72249999999997 97 435.3883333333333 97 C 424.445 97 413.1108333333333 97 402.16749999999996 97 C 390.8333333333333 97 379.49916666666667 97 368.55583333333334 97 C 357.2216666666667 97 346.2783333333333 97 334.94416666666666 97 C 324.00083333333333 97 312.66666666666663 97 301.3325 97 C 290.38916666666665 97 279.055 97 268.1116666666667 97 C 256.77750000000003 97 245.83416666666668 97 234.5 97 C 223.16583333333332 97 212.2225 97 200.88833333333332 97 C 189.945 97 178.61083333333332 97 167.6675 97 C 156.33333333333331 97 144.99916666666667 97 134.05583333333334 97 C 122.72166666666668 97 111.77833333333332 97 100.44416666666666 97 C 89.50083333333333 97 78.16666666666666 97 66.8325 97 C 55.88916666666666 97 44.555 97 33.611666666666665 97 C 22.277499999999996 97 11.334166666666667 97 5.471666666666667 97 L 0 97 L 0 54.98768186384843 Z ")
      //fillPath.fillType = Path.FillType.EVEN_ODD
      val rectF = RectF()
      fillPath.computeBounds(rectF, true)
      val matrix = Matrix()
      val scale = minOf( size.width / rectF.width(), size.height / rectF.height() )
      matrix.setScale(scale, scale)
      fillPath.transform(matrix)
      val composePathFill = fillPath.asComposePath()

      drawPath(path = composePathFill, color = Color(red = 0.32549020648002625f, green = 0.7960784435272217f, blue = 0.5960784554481506f, alpha = 1f), style = Fill)
      drawPath(path = composePathFill, color = Color(red = 0f, green = 0f, blue = 0f, alpha = 1f), style = Stroke(width = 2f, miter = 4f, join = StrokeJoin.Round))
    }}
